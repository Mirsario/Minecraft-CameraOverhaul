plugins {
    id "fabric-loom" version "0.8-SNAPSHOT"
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "net.fabricmc") // Prevent preparing two loader versions in cache. Not needed
	}
	include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
	
	// Fabric Resource Loader (needed for localization, which Cloth Config needs)
	// Actually not needed, because this is only used with ModMenu, and ModMenu includes it
	//modApi(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
	//include fabricApi.module("fabric-resource-loader-v0", project.fabric_version)
	
	// ModMenu API, to add the Config Screen to it
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
